https://www.codota.com/code/java/methods/javax.persistence.criteria.CriteriaBuilder/isNull


https://www.programcreek.com/java-api-examples/?api=javax.persistence.criteria.Join

https://www.initgrep.com/posts/java/jpa/create-programmatic-queries-using-criteria-api

https://www.logicbig.com/tutorials/java-ee-tutorial/jpa/criteria-builder-string-function.html


{"pdbversion":{"vehicle_id":"1","pdb_manual_comment":"test","status":true,"pdbversion":1},
"pdbdata_list":
[{"model_id":"1","dfm_id":"1","status":"y"},{"model_id":"1","dfm_id":"2","status":"n"},{"model_id":"1","dfm_id":"3","status":"o"},{"model_id":"2","dfm_id":"1","status":"o"},{"model_id":"2","dfm_id":"2","status":"n"},{"model_id":"2","dfm_id":"3","status":"y"},{"model_id":"3","dfm_id":"1","status":"y"},{"model_id":"3","dfm_id":"2","status":"n"},{"model_id":"3","dfm_id":"3","status":"o"}],
"button_type":"submit"}


pvg.setVehicle_id((Pdbversion) session.get(Pdbversion.class, pdbdata.get("model_id")));


Uncompilable source code - Erroneous sym type: com.ivn_1A.models.pdbowner.Pdbversion_group.setVehicle_id

Integer.parseInt((String) vehicleversion_value.get("vehicleversion"))


CriteriaBuilder builder = s.getCriteriaBuilder();
CriteriaQuery<Domain_and_Features_Mapping> criteriaQuery = builder.createQuery(Domain_and_Features_Mapping.class);
Root<Domain_and_Features_Mapping> dfm = criteriaQuery.from(Domain_and_Features_Mapping.class);
List<Domain_and_Features_Mapping> dfm_result = s.createQuery(criteriaQuery).getResultList();


String sql = "SELECT d.domain_name as domain, f.feature_name as fea, CAST(dfm.id as CHAR(100)) as fid from domain_and_features_mapping as dfm INNER JOIN domain AS d ON d.id = dfm.domain_id "
                    + "INNER JOIN features AS f ON f.id = dfm.feature_id";


[{"fid":"1","fea":"FRT MNL A/C ON","domain":"AIR CONDITIONER"},{"fid":"2","fea":"FRT AUTO A/C ON (DUAL ZONE)","domain":"AIR CONDITIONER"},{"fid":"3","fea":"Demist Vents on IP","domain":"AIR CONDITIONER"},{"fid":"4","fea":"Glove Box Cooling","domain":"AIR CONDITIONER"},{"fid":"5","fea":"2nd row Foot Duct","domain":"AIR CONDITIONER"},{"fid":"12","fea":"Rear AC Vent","domain":"AIR CONDITIONER"},{"fid":"13","fea":"Rear AC Control Switch","domain":"AIR CONDITIONER"},{"fid":"6","fea":"Demister","domain":"RR DEFOGGER"},{"fid":"7","fea":"Internally Variable Displacement AC Compressor","domain":"IVDC"},{"fid":"8","fea":"Externaly variable compressor","domain":"IVDC"},{"fid":"9","fea":"Paper filter","domain":"Filter"},{"fid":"10","fea":"Carbon filter","domain":"Filter"},{"fid":"11","fea":"PM 2.5 Clean Air Certification","domain":"PM 2.5 Clean Air Certification"}]



Sets Example:
List<Pdbversion_group> pdb_previous_data = pdbownerdb.GetPDBPreviousVersion_DomFea(1);
System.out.println("pdb_previous_data" + pdb_previous_data.get(0).getDomain_and_features_mapping_id().getId());

Set<String> dfm_set = new HashSet<String>(); 
dfm_set.add("1");
dfm_set.add("2");
dfm_set.add("4");
dfm_set.add("5");
dfm_set.add("6");


Set<String> pvg_result = new HashSet<String>(); 
for (Pdbversion_group pvg : pdb_previous_data) {
pvg_result.add(String.valueOf(pvg.getDomain_and_features_mapping_id().getId()));
}
Set<String> diff = Sets.difference(pvg_result, dfm_set);
//            pvg_result.add("1");
//            pvg_result.add("2");
//            pvg_result.add("3"); 
//            pvg_result.add("4");
//            pvg_result.add("7");
System.out.println(diff);
//            Sets.symmetricDifference(a, b);
//

Find Removed versions from previous pdb:
SELECT GROUP_CONCAT(DISTINCT(pvg.domain_and_features_mapping_id)) as dfm_id, GROUP_CONCAT(DISTINCT(CONCAT('(',d.domain_name,')',' ',f.feature_name))) as dom_fea 
FROM pdbversion_group as pvg 
INNER JOIN domain_and_features_mapping as dfm ON dfm.id = pvg.domain_and_features_mapping_id 
INNER JOIN domain as d ON d.id=dfm.domain_id 
INNER JOIN features as f ON f.id=dfm.feature_id
WHERE pdbversion_id=1 AND pvg.domain_and_features_mapping_id NOT IN 
(SELECT DISTINCT domain_and_features_mapping_id FROM pdbversion_group WHERE pdbversion_id=2)

Find Added versions in Current pdb:

SELECT DISTINCT pvg.domain_and_features_mapping_id as dfm_id, CONCAT('(',d.domain_name,')',' ',f.feature_name) as dom_fea FROM pdbversion_group as pvg 
INNER JOIN domain_and_features_mapping as dfm ON dfm.id = pvg.domain_and_features_mapping_id 
INNER JOIN domain as d ON d.id=dfm.domain_id 
INNER JOIN features as f ON f.id=dfm.feature_id
WHERE pdbversion_id=2 AND pvg.domain_and_features_mapping_id NOT IN (SELECT DISTINCT domain_and_features_mapping_id FROM pdbversion_group WHERE pdbversion_id=1)


final CriteriaBuilder criteriaBuilder = s.getCriteriaBuilder();
            CriteriaQuery criteriaQuery = criteriaBuilder.createQuery();

            Root<Pdbversion_group> pdbversion_groupRoot = criteriaQuery.from(Pdbversion_group.class);
            Join<Pdbversion_group, Vehicle> vehicleJoin = pdbversion_groupRoot.join("id", JoinType.INNER);
            Join<Pdbversion_group, Vehiclemodel> modelJoin = vehicleJoin.join("id", JoinType.INNER);
            criteriaQuery.select(vehicleJoin.get("vehiclename")).distinct(true);
            criteriaQuery.select(criteriaBuilder.construct(Pdbversion_group.class, criteriaBuilder.function("group_concat", String.class, modelJoin.get("modelname"))));
            criteriaQuery.where(criteriaBuilder.equal(pdbversion_groupRoot.get("vehicle_id").get("id"), id));
            System.err.println(criteriaQuery.toString());

Working code:
criteriaQuery.select(criteriaBuilder.concat(domJoin.<String>get("domain_name"),feaJoin.<String>get("feature_name")));

{
"removed_features":"(d1) feature3, (d1) feature5",
"added_features":"(d1) feature4", 
"removed_models":"m2,m4", 
"added_models":"m3", 
"previous_version":"1.0", 
"current_version":"1.1"
}

SELECT DISTINCT pvg.vehiclemodel_id as vm_id, vm.modelname as modelname FROM pdbversion_group as pvg 
INNER JOIN vehiclemodel as vm ON vm.id = pvg.vehiclemodel_id
WHERE pdbversion_id=1 AND pvg.vehiclemodel_id NOT IN (SELECT DISTINCT vehiclemodel_id FROM pdbversion_group WHERE pdbversion_id=2)


1. if select vehicle, show the major/minor option
   if new vehicle, hide the major/minor option

2. if new vehicle means, always store the version as 1.0

3. if select vehicle, version has to be stored as two format:
-if major changes - new version 2.0 should create
-if minor changes - sub version 1.1 should create



In load pdb version, the pdb data will be generated based on vehicle from pdbversion table


-load 1.0 data 
if status inactive, update in same version, never show the major/minor options
if status active, ask major or minor changes- if major new version or if minor sub version
major version 

